generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole    @default(USER)
  accounts       Account[]
  watchlist      Watchlist[] // Relation to Watchlist model
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String      @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String      @unique
  expires DateTime
  
  @@unique([email, token])
}

model FinancialDataConsolidated {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  filename         String
  sheets           Json?    // Store JSON data
}

model FinancialDataStandalone {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  filename         String
  sheets           Json?    // Store JSON data
}

model Watchlist {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  watchlistNumber Int
  symbol         String
  price          Float
  percentChange  String
  user           User     @relation(fields: [userId], references: [id])
}

